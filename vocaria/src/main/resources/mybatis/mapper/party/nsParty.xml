<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="www.voca.ria.party.mapper.PartyMapper">
	<resultMap id="rmPartyVO" extends="nsEntity.rmEntity"
		type="www.voca.ria.party.model.PartyVO">
		<result property="name" column="name" />
		<result property="birthDate" column="birth" />
		<discriminator javaType="String" column="descrim">
			<case value="P" resultMap="rmPersonVO" />
         	<case value="G" resultMap="rmGroupVO" />
		</discriminator>
	</resultMap>
	
	<resultMap id="rmGroupVO" extends="rmPartyVO"
		type="www.voca.ria.party.model.GroupVO">
		<collection property="providingRoleList" columnPrefix="role_"
			resultMap="rmRoleVO">
		</collection>
	</resultMap>
	
	<resultMap id="rmPersonVO" extends="rmPartyVO"
		type="www.voca.ria.party.model.PersonVO"/>
	
	<resultMap id="rmAccountVO" extends="nsEntity.rmTimeEntity"
		type="www.voca.ria.party.model.AccountVO">
		<result property="passWord" column="pswd" />
		<result property="nick" column="nick" />
		<result property="introduction" column="intro" />
		<association property="owner" columnPrefix="own_"
				resultMap="rmPersonVO" />
		<collection property="roleList" columnPrefix="role_"
			resultMap="rmRoleVO">
		</collection>
	</resultMap>
	
	<resultMap id="rmRoleVO" extends="nsEntity.rmEntity"
		type="www.voca.ria.party.model.role.RoleVO">
		<result property="name" column="name" />
		<result property="info" column="info" />
		<result property="isDefault" column="dflt" />
		<association property="provider" columnPrefix="prov_"
			resultMap="rmGroupVO"/>
		<collection property="allowedActList" columnPrefix="act_"
			resultMap="rmActVO">
		</collection>
	</resultMap>
	
	<resultMap id="rmActVO" type="www.voca.ria.party.model.role.ActVO">
		<id property="act" column="act"/>
		<result property="area" column="area" />
		<result property="type" column="type" />
		<result property="info" column="info" />
	</resultMap>
	
	<!-- 	public List<GroupVO> listAllGroup(@Param("page") PageDTO page); -->
	<select id="listAllGroup" resultMap="rmGroupVO">
		select *
		  from t_party
		 where descrim = 'G'
		   and id > '0000'
		 order by id desc
		 limit ${page.onePageNum}
		offset ${page.offset}
	</select>
	
	<!-- 	public List<AccountVO> listAllAccount(@Param("groupId") String groupId,
			@Param("page") PageDTO page); -->
	<select id="listAllAccount" resultMap="rmAccountVO">
		select acc.*,
				owner.id own_id,
					owner.descrim own_descrim,
					owner.name own_name,
				role.id role_id,
					role.provider role_prov_id,
					role.name role_name,
					role.info role_info,
					role.dflt role_dflt
		  from t_account acc
		  left outer join t_party owner
		    on owner.id = acc.owner
		  left outer join rel_account_role rel
		    on rel.account = acc.id
		  left outer join t_role role
		    on role.id = rel.role
		 where role.provider = #{groupId}
		 limit ${page.onePageNum}
		offset ${page.offset}
	</select>
	
	<!-- 	public List<RoleVO> listAllAnonymRoles(); -->
	<select id="listAllAnonymRoles" resultMap="rmRoleVO">
		select r.*,
		    	prov.id prov_id, prov.discrim prov_discrim,
		    	prov.name prov_name, prov.birth prov_birth,
		    	act.act act_act, act.area act_area,
		    	act.type act_type, act.info act_info
		  from t_role r
		  left outer join t_party prov
		    on r.provider = prov.id
		  left outer join rel_role_act allow
		    on r.id = allow.role
		  left outer join sys_act act
		    on allow.act = act.act
		 where act.area = 'Anonym'
	</select>
	
	<!-- 	public List<RoleVO> listAllDefaultRolesOf(@Param("group") GroupVO group); -->
	<select id="listAllDefaultRolesOf" resultMap="rmRoleVO">
		select r.*,
	        	prov.id prov_id, prov.descrim prov_descrim,
	        	prov.name prov_name, prov.birth prov_birth,
	    	    act.act act_act, act.area act_area,
	    	    act.type act_type, act.info act_info
		  from t_role r
		  left outer join t_party prov
		    on r.provider = prov.id
		  left outer join rel_role_act allow
		    on r.id = allow.role
		  left outer join sys_act act
		    on allow.act = act.act
		 where r.provider = #{group.id}
		   and r.dflt = 1
	</select>
	
	<!-- 	public List<ActVO> listAllAct(); -->
	<select id="listAllAct" resultMap="rmActVO">
		select *
		  from sys_act
	</select>
	
	<!-- 	public GroupVO getGroupById(String groupId); -->
	<select id="getGroupById" resultMap="rmGroupVO">
		select g.*,
				role.id role_id,
					role.provider role_prov_id, role.name role_name,
					role.info role_info, role.dflt role_dflt,
				act.act role_act_act,
					act.area role_act_area, act.type role_act_type,
					act.info role_act_info
		  from t_party g
		  left outer join t_role role
		    on role.provider = g.id
		  left outer join rel_role_act allow
		    on allow.role = role.id
		  left outer join sys_act act
		    on act.act = allow.act
		 where g.id = #{groupId}
		   and g.descrim = 'G'
	</select>
	
	<!-- 	AccountVO getAccountById(String id); -->
	<select id="getAccountById" resultMap="rmAccountVO">
		select acc.*,
	        	own.id own_id, own.descrim own_descrim,
	        	own.name own_name, own.birth own_birth,
	        	role.id role_id, role.name role_name,
	        	role.info role_info, role.dflt role_dflt,
	        	prov.id role_prov_id, prov.descrim role_prov_descrim,
	        	prov.name role_prov_name, prov.birth role_prov_birth,
	        	act.act role_act_act, act.area role_act_area,
	        	act.type role_act_type, act.info role_act_info
		  from t_account acc
		  left outer join t_party own
		    on acc.owner = own.id
		  left outer join rel_account_role allow
		    on acc.id = allow.account
		  left outer join t_role role
		    on allow.role = role.id 
		  left outer join t_party prov
		    on role.provider = prov.id
		  left outer join rel_role_act abt
		    on role.id = abt.role
		  left outer join sys_act act
		    on abt.act = act.act
		 where acc.id = #{id}
	</select>
	
	<!-- 	public RoleVO getRoleByProviderAndName(String providerId, String name); -->
	<select id="getRoleByProviderAndName" resultMap="rmRoleVO">
		select role.*,
	        	prov.id prov_id, prov.descrim prov_descrim,
	        	prov.name prov_name, prov.birth prov_birth,
	        	act.act act_act, act.area act_area,
	        	act.type act_type, act.info act_info
		  from t_role role
		  left outer join t_party prov
		    on role.provider = prov.id
		  left outer join rel_role_act abt
		    on role.id = abt.role
		  left outer join sys_act act
		    on abt.act = act.act
		 where prov.id = #{providerId}
		   and role.name = #{name}
	</select>
	
	<!-- 	public ActVO getActByCode(String code); -->
	<select id="getActByCode" resultMap="rmActVO">
		select *
		  from sys_act
		 where act = #{code}
	</select>
	
	<!-- 	public boolean isValidLoginId(String loginId); -->
	<select id="isValidLoginId" resultType="boolean">
		select count(*) = 0
		  from t_account
		 where id = binary(#{loginId})
	</select>
	
	<!-- 	public boolean isValidNick(String nick); -->
	<select id="isValidNick" resultType="boolean">
		select count(*) = 0
		  from t_account
		 where nick = binary(#{nick})
	</select>
	
	<!-- 	public boolean isValidGroupName(String groupName); -->
	<select id="isValidGroupName" resultType="boolean">
		select count(*) = 0
		  from t_party
		 where name = binary(#{boolean})
		   and descrim = 'G'
	</select>

	<!-- public int createPerson(@Param("person") PersonVO person); -->
	<insert id="createPerson">
		<selectKey keyProperty="person.id" resultType="String"
			order="BEFORE">
			select NEXT_PK('s_party')
		</selectKey>
		insert into t_party(id, descrim, name, birth)
		values(#{person.id}, 'P', #{person.name}, #{person.birthDate});
	</insert>
	
	<!-- public int createAccount(@Param("account") AccountVO account);  -->
	<insert id="createAccount">
		insert into t_account(id, pswd, nick, intro, owner)
		values(#{account.id}, #{account.passWord}, #{account.nick}, #{account.introduction}, #{account.owner.id});
	</insert>
	
	<!-- public int createGroup(@Param("group") GroupVO group);  -->
	<insert id="createGroup">
		<selectKey keyProperty="group.id" resultType="String" order="BEFORE">
    		select NEXT_PK('s_party')
  		</selectKey>
  		insert into t_party(id, descrim, name, birth)
  		values (#{group.id}, 'G', #{group.name}, curdate())
	</insert>
	
	<!-- public int grantRolesToUser(@Param("account") AccountVO account,
			@Param("rolesList") List<RoleVO> rolesList); -->
	<insert id="grantRolesToUser">
		insert into rel_account_role (account, role)
        select sub.*
          from
        <foreach open="(" collection="rolesList" item="role" separator=" union all " close=")">
        	select
        		#{account.id} as account,
        		#{role.id} as role
        </foreach> sub;
	</insert>
	
	<!-- public int grantGroupManager(@Param("account") AccountVO account,
			@Param("group") GroupVO group); -->
	<insert id="grantGroupManager">
		call GRANT_GROUP_MANAGER(#{account.id}, #{group.id})
	</insert>
	
	<!-- public int depriveRolesFromUser(@Param("account") AccountVO account,
			@Param("groupId") String groupId);-->
	<delete id="depriveRolesFromUser">
		delete rel.*
		  from rel_account_role rel
		  left outer join t_role role
		    on role.id = rel.role
		 where rel.account = #{account.id}
		   and role.provider = #{groupId}
	</delete>
</mapper>
