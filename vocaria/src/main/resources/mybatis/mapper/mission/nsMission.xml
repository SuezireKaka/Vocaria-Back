<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="www.voca.ria.mission.mapper.MissionMapper">
	<resultMap id="rmMissionVO" extends="nsEntity.rmTimeEntity"
			type="www.voca.ria.mission.model.MissionVO">
		<result property="isViewed" column="viewed" />
		<result property="isComplete" column="complete" />
		<association property="maker" columnPrefix="mkr_"
				resultMap="www.voca.ria.party.mapper.PartyMapper.rmAccountVO" />
		<collection property="scorePieceList" columnPrefix="sp_"
				resultMap="rmScorePieceVO">
		</collection>
	</resultMap>
	
	<resultMap id="rmScorePieceVO"
			type="www.voca.ria.mission.model.ScorePieceVO">
		<id property="id" column="qst_id"/>
		<result property="isAnswer" column="answer" />
		<association property="question" columnPrefix="qst_"
				resultMap="rmQuestionVO" />
	</resultMap>
	
	<resultMap id="rmQuestionVO" extends="nsEntity.rmEntity"
		type="www.voca.ria.mission.model.QuestionVO">
		<result property="question" column="question" />
		<association property="subject" columnPrefix="subj_"
				resultMap="www.voca.ria.vocabulary.mapper.VocaMapper.rmSubjectVO" />
		<collection property="choiceList" ofType="String">
			<result column="choice" javaType="String"/>
		</collection>
	</resultMap>
	
	<!-- public List<MissionVO> listAllMissionFrom(
			@Param("teacherId") String teacherId,
			@Param("studentId") String studentId,
			@Param("date") String dateString, @Param("page") PageDTO page); -->
	<select id="listAllMissionFrom" resultMap="rmMissionVO">
		select lm.*
		  from (
			select mission.*,
					count(case when rel.answer = 1 then 1 end) = count(rel.answer) complete,
					maker.id mkr_id, maker.nick mkr_nick
			  from t_mission mission
			  left outer join t_account maker
			    on maker.id = mission.maker
			  left outer join rel_mission_question rel
		    	on rel.mission = mission.id
			 where mission.reg_dt like #{date}
			   and mission.tester = #{studentId}
			   and mission.maker = #{teacherId}
			 group by rel.mission
			 limit ${page.onePageNum}
			offset ${page.offset}
			) lm
		  left outer join rel_mission_question sp
		    on sp.mission = lm.id
		  left outer join t_question quest
    	    on quest.id = sp.question
	</select>
	<!-- public long countAllMissionFrom(@Param("teacherId") String teacherId,
			@Param("studentId") String studentId, @Param("date") String dateString); -->
	<select id="countAllMissionFrom" resultType="long">
		select count(*)
		  from t_mission
		 where reg_dt like #{date}
		   and tester = #{studentId}
		   and maker = #{teacherId}
	</select>
	
	<!-- public List<MissionVO> listAllMissionTo(@Param("accountId") String accountId,
			@Param("date") String dateString, @Param("page") PageDTO page); -->
	<select id="listAllMissionTo" resultMap="rmMissionVO">
		select lm.*
		  from (
			select mission.*,
					count(case when rel.answer = 1 then 1 end) = count(rel.answer) complete,
					maker.id mkr_id, maker.nick mkr_nick
			  from t_mission mission
			  left outer join t_account maker
			    on maker.id = mission.maker
			  left outer join rel_mission_question rel
		    	on rel.mission = mission.id
			 where mission.reg_dt like #{date}
			   and mission.tester = #{accountId}
			 group by rel.mission
			 limit ${page.onePageNum}
			offset ${page.offset}
			) lm
		  left outer join rel_mission_question sp
		    on sp.mission = lm.id
		  left outer join t_question quest
    	    on quest.id = sp.question
	</select>
	<!-- public long countAllMissionTo(@Param("accountId") String accountId,
			@Param("date") String dateString); -->
	<select id="countAllMissionTo" resultType="long">
		select count(*)
		  from t_mission
		 where reg_dt like #{date}
		   and tester = #{accountId}
	</select>
	
	<!-- public int countAnswerChoice(@Param("missionId") String missionId); -->
	<select id="countAnswerChoice" resultType="int">
		select count(*)
		  from rel_mission_question
		 where mission = #{missionId}
		   and answer = 1
	</select>
	
	<!-- public MissionVO getMissionById(String missionId); -->
	<select id="getMissionById" resultMap="rmMissionVO">
		select mission.*,
				count(case when rel.answer = 1 then 1 end) over (partition by rel.mission)
					= count(rel.answer) over (partition by rel.mission) complete,
				maker.id mkr_id, maker.nick mkr_nick,
				rel.answer sp_answer,
				quest.id sp_qst_id, quest.question sp_qst_question,
				'' sp_qst_choice
		  from t_mission mission
		  left outer join t_account maker
		    on maker.id = mission.maker
		  left outer join rel_mission_question rel
		    on rel.mission = mission.id
		  left outer join t_question quest
		    on quest.id = rel.question
		 where mission.id = #{missionId}
		 order by quest.id
	</select>
	
	<!-- public int insertMission(@Param("mission") MissionVO missionVO,
			@Param("tester") AccountVO tester); -->
	<insert id="insertMission">
		<selectKey keyProperty="mission.id" resultType="String"
			order="BEFORE">
			select NEXT_PK('s_mission')
		</selectKey>
		insert into t_mission(id, tester, maker, viewed)
		values (
			#{mission.id},
			#{tester.id},
			#{mission.maker.id},
			${mission.isViewed}
		);
	</insert>
	
	<!-- public int evaluate(@Param("missionId") String missionId,
			@Param("questionIdList") List<String> questionIdList,
			@Param("chooseList") List<String> chooseList); -->
	<insert id="evaluate">
		insert into rel_mission_question(mission, question, answer)
		select sub.*
		  from
		<foreach collection="questionIdList" item="questId" index="idx"
		  	open="(" separator="union all" close=")"
		>
		    select #{missionId} as mission,
		    		#{questId} as question,
		    		choice.choice = #{chooseList[${idx}]} as answer
		      from t_question quest
		      left outer join t_choice choice
		        on choice.question = quest.id
		     where quest.id = #{questId}
		       and choice.answer = 1
		</foreach> sub;
	</insert>
</mapper>
