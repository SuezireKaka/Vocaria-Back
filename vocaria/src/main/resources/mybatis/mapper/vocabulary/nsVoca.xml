<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="www.voca.ria.vocabulary.mapper.VocaMapper">
	<resultMap id="rmVocaVO" extends="nsEntity.rmTimeEntity"
		type="www.voca.ria.vocabulary.model.VocaVO">
		<result property="name" column="name" />
		<result property="introduce" column="intro" />
		<association property="maker" columnPrefix="mkr_"
				resultMap="www.voca.ria.party.mapper.PartyMapper.rmAccountVO" />
		<association property="chapterList" columnPrefix="chpt_"
				resultMap="rmChapterVO" />
	</resultMap>
	
	<resultMap id="rmChapterVO" extends="nsEntity.rmEntity"
		type="www.voca.ria.vocabulary.model.ChapterVO">
		<result property="name" column="name" />
		<result property="questionNumber" column="qnum" />
		<collection property="questionList" columnPrefix="qst_"
				resultMap="rmQuestionVO">
		</collection>
	</resultMap>
	
	<resultMap id="rmQuestionVO" extends="nsEntity.rmEntity"
		type="www.voca.ria.vocabulary.model.QuestionVO">
		<result property="question" column="question" />
		<association property="subject" columnPrefix="subj_"
				resultMap="rmSubjectVO" />
		<collection property="choiceList" ofType="String">
			<result column="choice" javaType="String"/>
		</collection>
	</resultMap>
	
	<resultMap id="rmSubjectVO" extends="nsEntity.rmEntity"
		type="www.voca.ria.vocabulary.model.SubjectVO">
		<result property="subject" column="subject" />
	</resultMap>
	
	<!-- public List<VocaVO> listAllVoca(@Param("page") PageDTO page); -->
	<select id="listAllVoca" resultMap="rmVocaVO">
		select voca.id, voca.name, voca.reg_dt, voca.upt_dt,
		        maker.id mkr_id, maker.nick mkr_nick
		  from t_voca voca
		  left outer join t_account maker
		    on maker.id = voca.maker
		 order by id desc
		 limit ${page.onePageNum}
		offset ${page.offset}
	</select>
	<!-- public long countAllVoca(); -->
	<select id="countAllVoca" resultType="long">
		select count(*)
		  from t_voca voca
	</select>
	
	<!-- public List<VocaVO> listAllSubscribes(@Param("student") AccountVO student,
			@Param("page") PageDTO page); -->
	<select id="listAllSubscribes" resultMap="rmVocaVO">
		select voca.id, voca.name, voca.reg_dt, voca.upt_dt,
		        maker.id mkr_id, maker.nick mkr_nick
		  from t_voca voca
		  left outer join t_account maker
		    on maker.id = voca.maker
		  left outer join t_subscribe subs
		    on subs.voca = voca.id
		 where subs.account = #{student.id}
		   and subs.alive = 1
		 order by id desc
		 limit ${page.onePageNum}
		offset ${page.offset}
	</select>
	<!-- public long countAllSubscribes(@Param("student") AccountVO student); -->
	<select id="countAllSubscribes" resultType="long">
		select count(*)
		  from t_voca voca
		  left outer join t_subscribe subs
		    on subs.voca = voca.id
		 where subs.account = #{student.id}
		   and subs.alive = 1
	</select>
	
	<!-- public VocaVO getVocaById(@Param("id") String id); -->
	<select id="getVocaById" resultMap="rmVocaVO">
		select voca.*,
		    maker.id mkr_id, maker.nick mkr_nick,
		    chapter.id chpt_id, chapter.name chpt_name, count(rec.pos) chpt_qnum
		  from t_voca voca
		  left outer join t_account maker
		    on maker.id = voca.maker
		  left outer join t_chapter chapter
		    on chapter.voca = voca.id
		  left outer join rel_chapter_question rec
		    on rec.chapter = chapter.id
		 where voca.id = #{id}
		 group by rec.chapter
	</select>
	
	<!-- public ChapterVO getChapter(@Param("vocaId") String vocaId,
			@Param("chapterNum") int chapterNum); -->
	<select id="getChapter" resultMap="rmChapterVO">
		select chapter.id, chapter.name,
				max(rec.pos) over (partition by chapter.id) qnum,
				quest.id qst_id, quest.question qst_question,
					subj.id qst_subj_id, subj.subject qst_subj_subject,
					choice.choice qst_choice
		  from t_chapter chapter
		  left outer join rel_chapter_question rec
		    on rec.chapter = chapter.id
		  left outer join t_question quest
		    on quest.id = rec.question
		  left outer join t_subject subj
		    on subj.id = quest.subject
		  left outer join t_choice choice
		    on choice.question = quest.id
		 where chapter.voca = #{vocaId}
		   and chapter.pos = ${chapterNum}
		 order by rec.pos, quest.id, rand()
	</select>
	
	<!-- public boolean isSubscribing(@Param("student") AccountVO student,
			@Param("vocaId") String vocaId); -->
	<select id="isSubscribing" resultType="boolean">
		select count(*) > 0
		  from t_subscribe
		 where account = #{student.id}
		   and voca = #{vocaId}
		   and alive = 1
	</select>
	
	<!-- public boolean isFirstSubscribe(@Param("student") AccountVO student,
			@Param("vocaId") String vocaId); -->
	<select id="isFirstSubscribe" resultType="boolean">
		select count(*) = 0
		  from t_subscribe
		 where account = #{student.id}
		   and voca = #{vocaId}
	</select>
	
	<!-- public int firstSubscribe(@Param("student") AccountVO student,
			@Param("vocaId") String vocaId); -->
	<insert id="firstSubscribe">
		insert into t_subscribe(account, voca)
		values (#{student.id}, #{vocaId})
	</insert>
	
	<!-- public int toggleSubscribe(@Param("student") AccountVO student,
			@Param("vocaId") String vocaId); -->
	<update id="toggleSubscribe">
		update t_subscribe
		   set alive = 1 - alive
		 where account = #{student.id}
		   and voca = #{vocaId}
	</update>
</mapper>
